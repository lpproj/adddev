

struc Ver2.40                                                  USER'S MANUAL


                                                                 30/Aug/1989
               アセンブリ言語用構造化マクロ 'struc'  Ver 2.40
                                                  Copyright (C)1989  Kacchan
                                                           JUP1076D(JUPITER)
                                                           NBC00034(NIFTY  )
                                                           QNG33261(PC-VAN )


1  はじめに

  アセンブリ言語でプログラムする時苦労するのは、アセンブリ言語その物もそうで
すが、高級言語にある制御構造がないことだと思います。そのために一つ一つラベル
へジャンプするので、可読性が悪く、ラベリングが大変な作業になります。
　構造化マクロ 'struc' は、アセンブリ言語 (MASM互換)のソースプログラムを構造
化するためのマクロセットです。アセンブリ言語で、高級言語とほぼ同じ制御構造が
実現できます。その結果、ラベリングやプログラミングの作業が非常に楽になります。
勿論、可読性も良くなりプログラムの保守についても今まで以上に良くなることでし
ょう。

　このような目的のマクロには、古川氏 (Nifty-Serve PAF00600)の'lms'があり、最
近のバージョンでは、記述も高級言語と同じようになっています。'struc'も'lms'と
同じような文法を採用しました。ただし、完全互換ではありません。

　'struc'で、提供しているものは、

    1) ブロックif    _if , _elseif , _else , _endif
    2) switch        _switch , _case , _default , _endsw
    3) 条件ループ    _do , _while , _until , _enddo
    4) 回数ループ    _loop , _endloop
    5) 複合条件継続  _c
    6) ブロック制御  _skipif , _exitif , _break , _exit , _continue
                     _repeat , _block , _endblock , _blockreg , _popreg
    7) 条件分岐      _on

以上です。


2  Ver2.30からの変更点
    1) TASM(ideal)でのバグフィックス
       _on , _if ･･ then  ではマクロ内でマクロ定義を行っているので、
       ideal モードでエラーとなる。
    2) TASM(ideal)依存マクロを分離
       (1)に伴いidealモード用マクロを追加。
           _ideal ideal modeへ移行
           _masm  masm modeへ移行
    3) ブロック内で使用するレジスタ保存・復帰マクロを追加
           _blockreg
           _popreg
    4) 条件記述を拡張
       ビットのオン、オフを表現できる条件記述
         _if <<test ax,8000h>,nz>  →  _if <<ax on 8000h>>
         _if <<ax nz 8000h>>,test  →  _if <<ax on 8000h>>
    5) 条件が真の時、ifブロックを抜け出すマクロを追加
         _exitif
    6) _case の内部マクロを修正
    7) バージョン変数を定義


                                    - 1 -                                   


struc Ver2.40                                                  USER'S MANUAL



3  対応アセンブラ

        対応アセンブラ     動作確認Ver
          OPTASM              1.6
          MASM                4.0
          TASM(masm/ideal)    1.0

4  使用方法

  OPTASM,MASM,TASM(masmモード)の場合は、ソースプログラムの先頭で、次の一行を
挿入します。

    include struc240.inc

  TASM(idealモード)の場合は、続いて次行を追加して下さい。

    include structb.inc

includeする時は、masmモードでなくてはなりません。この後、専用マクロでidealモ
ードにして下さい。詳しくは、"TASM(idealモード)について"を参照して下さい。

　各文の機能が分からない時、あるいは生成したコードに不安がある時は、マクロを
展開してみてください。既定値は .sall になっていますので、 .xall または .lall
をinclude文の次の行に指定してください。この時、OPTASMを使っている方は、OPTAS
MのCONFIGオプションの

      Indicate Include/Macro Nesting in Listings  を Y
      Have Macros List Just Bytes Generated       を N

にしてください。

  ファイル名は変更しても構いません。ただし、OPTASM V1.6で

    include struc.inc

とすると、エラーになります。ちなみに私は include _struc.inc としています。


5  文法

　以下に各文の説明をしますが、使用例と展開例を示しますので、それも参考にして
ください。

5.1  用語

◇[ ]カッコ
    省略可能を表します。


◇ |
    いずれかの選択を表します。


◇条件
    1) [命令,]<オペランド1 比較演算子 オペランド2>


                                    - 2 -                                   


struc Ver2.40                                                  USER'S MANUAL


    2) [命令,]<byte|word オペランド1 比較演算子 オペランド2>
    3) [命令,]<オペランド1 比較演算子 type オペランド2>
    4) [命令,]<レジスタ 比較演算子>
    5) [命令,]<比較演算子>

　1),2),3)の形式では、 'cmp  オペランド1,オペランド2'  という命令を自動的に生
成します。オペランド1 あるいは 2 にブランク、記号等を含む場合はオペランドを<>
でくくる必要があります。ただし、2),3)の形式を用いればこの限りではありません。
　なお、cmp命令はtest命令に変更することもできます。（使用例を参照）また、比較
演算子に on,off を指定した場合は、'test  オペランド1,オペランド2' という命令
を生成します。
　4)の形式では、'or  レジスタ,レジスタ' という命令を生成します。
　また、5)のようにオペランド1,2を省略して比較演算子のみでも構いません。

  2),3)の形式においてtypeは、byte,word あるいは、offset,seg等の演算子を表し、
byte,wordを指定した場合は、ptrをマクロ内で付け加えます。ただし、この記述はTA
SMのidealモードでエラーになることがあります。
  4)の形式において、レジスタかどうかのチェックはしていません。


◇条件指定
    <条件[,論理演算子,条件]>

　命令、条件、論理演算子の総数は10個まで指定できます。これより多く指定したい
場合は、条件の継続をしてください。


◇命令
    アセンブリ言語の命令を< >でくくったものです。

    例  <mov bx,0>
        <call func>

    なお、命令は複数記述することが出来ます。

    例  <lodsb>,<sub al,1>


◇比較演算子
    条件分岐命令で j に続いて使用する文字列。
    cxz(cx=0),cxnz(cx≠0)も指定出来ます。
    特別なものとして、on,off があります。（条件指定の例を参照）
    on,off は、nz,z と同じ意味です。


◇論理演算子
    andまたはor。 and,or両方指定した場合、優先度はandの方が高いです。


◇条件指定の例

    1) ax≠0
         _if <<ax ne 0>>
         _if <<or ax,ax>,ne>
         _if <<ax ne>>



                                    - 3 -                                   


struc Ver2.40                                                  USER'S MANUAL


    2) 0< ax <10
         _if <<ax a 0> and <ax b 10>>

    3) cf=1
         _if <<c>>

    4) cx=0
         _if <<cxz>>

    5) lodsb,al=0
         _if <<lodsb>,<al e 0>>

    6) test ax,80h  zf=1
         _if <<ax z 80h>>,test
         _if <<test ax,80h>,z>

    7) test ax,80h  zf=1
         _if <<ax off 80h>>

    8) byte ptr [bx] = 0
         _if <<byte [bx] e 0>>
         _if <<<byte ptr [bx]> e 0>>

    9) ( 0< ax <10 ) または ( 20 < bx < 30 )
         _if <<ax a 0> and <ax b 10>>,or
                                      ~~
         _c  <<bx a 20> and <bx b 30>>

    10) ( ax=0 または ax=10) かつ ( bx=0 または bx=10)
         _if <<ax e 0> or <ax e 10>>,and
                                     ~~~
         _c  <<bx e 0> or <bx e 10>>


  6),7)は、同じ条件を表します。つまり 7)は、自動的に test ax,80h の命令を生成
し(testパラメータがなくても)、off は z 、on は nz と同じ意味となります。
  9),10)のように条件指定の外にand,orを指定すると、条件指定を優先することが出
来ます。つまり、高級言語におけるカッコと同じ役割をします。そして、この指定は、
条件の継続があることを示します。(_cマクロが続きます)
  条件指定で、and,orを混ぜて指定するときは、このようにする複数行で記述した方
が良いと思います。ただし、２重カッコ的な使い方は出来ません。


◇_ifブロック
    _if - _endif で形成される実行文の集合。


◇ブロック
    _switch - _endsw , _do - _enddo , _loop - _endloop , _block - _endblock
    _do - _until , _while - _enddoで形成される実行文の集合。
    単にブロックと言えば、これらのことを示します。

◇注意
    比較・論理演算子、その他指定するパラメータは、小文字のみ指定可能です。




                                    - 4 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.2  _if 〜 _elseif , _else 〜 _endif文

書式
        _if 条件指定1 [,test][,or|and]
            実行文1
        _elseif 条件指定2 [,test][,or|and]
            実行文2
        _elseif 条件指定3 [,test][,or|and]
              ･･
        _else
            実行文
        _endif

機能
　条件指定に従い、続く実行文を実行または分岐します。条件指定が真であれば、続
く実行文を実行して _endif 以降へ分岐します。偽であれば、次の _elseif へ分岐し
て、その条件指定に従います。いずれの条件も偽であれば _else に続く実行文が実行
されます。また、_elseif,_elseは、なくても構いません。

　条件指定の後にtestを指定すると、cmp命令がtest命令に変わります。また、orある
いはandを指定すると、条件指定と次行の_c文の条件指定のor,andをとります。

使用例
        _if <<ax e 0>>
            inc ax
        _elseif <<bx e 0> or <bx e 10>>,and
        _c      <<ax e -1>>
            inc bx
        _elseif <<byte [bx] nz 8>>,test
            inc  byte ptr [bx]
        _else
            dec ax
            dec bx
        _endif

展開例
            cmp ax,0
            jne L1
                inc ax
                jmp L0
        L1: cmp bx,0
            je L2
            cmp bx,10
            jne L3
        L2: cmp ax,-1
            jne L3
                inc bx
                jmp L0
        L3: test byte ptr [bx],8
            jz L4
                inc byte ptr [bx]
                jmp L0
        L4: dec ax
            dec bx
        L0:



                                    - 5 -                                   


struc Ver2.40                                                  USER'S MANUAL



5.3  _if文

書式
        _if 条件指定[,test][,or|and] then <命令>

機能
  条件指定が真の時だけ、命令を実行します。

使用例
        _if <<ax z>> then <<mov ah,-1>,<call func>>

展開例
            or  ax,ax
            jnz L1
                mov  ah,-1
                call func
        L1:


5.4  _skipif文

書式
        _skipif [_ifブロックの数]

機能
  無条件でブロック数だけ、_ifブロックから抜け出します。

既定値
  _ifブロック数=1

使用例
        _if <<ax e 0>>
            _if <<bx e 0>>
                _if <<cx e 0>>
                    _skipif 3
                _endif
                inc  bx
            _endif
            inc  ax
        _endif

展開例
            cmp ax,0
            jne L1
                cmp bx,0
                jne L2
                    cmp cx,0
                    jne L3
                        jmp  L1
        L3:         inc bx
        L2:     inc ax
        L1:





                                    - 6 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.5  _exitif文

書式
        _exitif 条件指定[,test][,or|and][,_ifブロック数]

機能
  条件が真の時、ブロック数だけ_ifブロックから抜け出します。
  _if文同様、条件の継続が出来ます。

既定値
  _ifブロック数=1

使用例
        _if <<ax e 0>>
            _if <<bx e 0>>
                _exitif <<cx e 0>>,2
                inc  bx
            _endif
            inc  ax
        _endif
  この例は、_skipif 文の使用例と同じ内容ですが、展開されるコードに違いがあり
ます。そして、抜け出すブロック数が違い、_skipifでは_ifブロックのネストが一段
深くなっています。

展開例
            cmp ax,0
            jne L1
                cmp bx,0
                jne L2
                    cmp cx,0
                    je L1
        L3:         inc bx
        L2:     inc ax
        L1:
























                                    - 7 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.6  _switch 〜 _case , _default 〜 _endsw文

書式
        _switch  オペランド1
        _case 比較対象1
            ･･
            [_break]
        _case 比較対象n-1
            ･･
            [_break]
        _case 比較対象n
            ･･
            [_break]
        [_default]
            ･･
        _endsw

比較対象
        <オペランド2>[,test][,比較演算子]

既定値
        比較演算子=e 

機能
  _switch文で指定されたオペランド1と_case文の比較対象のオペランド2に含む値を
cmp命令し等しい時、続く実行文を実行します。オペランド2に含まれる値は、10個ま
で指定できます。
  オペランド1に空白を含む場合は、オペランド1を<>でくくります。ただし、byte p
tr [bx] , word ptr [bx] 等は、byte [bx] , word [bx] と記述出来ます。
  また、比較対象の第2パラメータにtestを指定すると、test命令となります。 
  比較演算子を指定することによって、その条件が真となる時、続く実行文を実行し
ます。この時、on,off を指定すると、testパラメータがなくても test命令となり、
nz,z と同じ意味になります。

使用例
        _switch  ax
        _case <1,2,3>
            inc bx
            _break
        _case <10>,b
            add bx,10h
            _break
        _case <80h>,test,nz   または _case <80h>,on
            add bx,100h
            _break
        _default
            mov  bx,0
        _endsw










                                    - 8 -                                   


struc Ver2.40                                                  USER'S MANUAL


展開例
            cmp ax,1
            je  L1
            cmp ax,2
            je  L1
            cmp ax,3
            jne L2
        L1:     inc bx
                jmp L0
        L2: cmp ax,10
            jnb L3
                add bx,10h
                jmp L0
        L3: test ax,80h
            jz  L4
                add bx,100h
                jmp L0
        L4: mov bx,0
        L0:







































                                    - 9 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.7  _do 〜 _enddo文

書式
        _do
            ･･
            [_exit 条件指定]
            ･･
            [_break]
            ..
        _enddo

機能
  無限ループを形成します。
  通常は、_exit,_break等と共に用いられます。もちろん、_continue,_repeatも使え
ます。

参考
  _exit文を_doのすぐ後ろにおけば、whileと同じ様な構造となります。
  ここで、同じ様な構造というのは、_exit文は条件が真の時、ブロックから抜けるか
らです。

使用例
        _do
            lodsb
            _exit <<al e 0>>
            shl al,1
            mov bl,al
            _exit <<bl z 80h>>,test
        _enddo

展開例
        L1: lodsb
                cmp al,0
                je  L0
                shl al,1
                mov bl,al
                test al,80h
                jz  L0
            jmp L1
        L0:


















                                    - 10 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.8  _while 〜 _enddo文

書式
        _while 条件指定[,test][,or|and]
            ･･
        _enddo

機能
  条件が真である間、ブロックを０回以上実行します。

使用例
        _while <<si e 10h>>
            lodsb
            _repeat <<al e 1bh>>
            mov bl,al
        _enddo

展開例
        L1: cmp si,10h
            jne L0
                lodsb
                cmp al,1bh
                je L1
                mov bl,al
            jmp L1
        L0:


5.9  _do 〜 _until文

書式
        _do
          ･･
        _until 条件指定[,test][,or|and]

機能
  条件が真になるまで（偽の間）、ブロックを１回以上実行します。

使用例
        _do
            lodsb
            _exit <<al e 0dh>>
            mov bl,al
        _until <<al e 0>>

展開例
        L1: lodsb
            cmp al,0dh
            je  L0
            mov bl,al
            cmp al,0
            jne L1
        L0:





                                    - 11 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.10  _loop 〜 _endloop文

書式
        _loop [回数]
           ･･
        _endloop [n|ne|z|nz]

機能
  ループを形成します。回数を指定した場合は、その数をcxレジスタに代入します。
  回数を指定していないときは、cxレジスタにループする回数を代入しておかなけれ
ばなりません。
  また、_endloopでは、loop命令を展開しますが、n|ne|z|nz のいづれかを指定した
場合は、それぞれ、loope,loopne,loopz,loopnz と展開されます。

使用例
        _loop 8
            lodsb
            add al,20h
            stosb
        _endloop

展開例
            mov cx,8
        L1: lodsb
            add al,20h
            stosb
            loop L1































                                    - 12 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.11  _block 〜 _endblock文

書式
        _block
          ･･
        _endblock

機能
  ブロックを形成します。

参考
  _exit,_break,_continue,_repeatが使用できます。
  _repeatを_endblockのすぐ前におけば、untilと同じ様な構造となります。つまり、
_repeatの条件が真の間、そのブロックを繰り返します。

使用例
        _block
            lodsb
            _repeat <<al be ' '>>
        _endblock

展開例
        L1: lodsb
            cmp al,' '
            jbe L1
        L2:
































                                    - 13 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.12  _break文

書式
        _break [ブロック数]

既定値
  ブロック数=1

機能
  無条件で、ブロック数だけブロックから抜け出します。
  ブロック内で使用出来ます。


5.13  _exit文

書式
        _exit 条件指定[,test][,or|and][,ブロック数]

既定値
  ブロック数=1

機能
  条件が真の時、ブロック数だけブロックから抜け出します。
  _if文同様、条件の継続が出来ます。
  ブロック内で使用出来ます。

































                                    - 14 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.14  _continue文

書式
        _continue [ブロック数][,end]

既定値
  ブロック数=1

機能
  無条件で、ブロック数だけ外側のブロック先頭へ分岐します。
  endを指定することによって、ブロックの最後に分岐することもできます。
  通常この指定をするのは、対応するブロックが、_loop〜_endloop,_do〜_untilの場
合、_endloop,_untilのところへ分岐するために用います。
  ブロック内で使用出来ます。

使用例
        _do
            lodsb
            _if <<al z>>
                inc bx
                _continue end
            _endif
            stosb
        _until <<di e 100h>>

展開例
        L1: lodsb
            or al,al
            jnz L2
                inc bx
                jmp L3
        L2: stosb
        L3: cmp di,100h
            jne L1


5.15  _repeat文

書式
        _repeat 条件指定[,test][,or|and][,ブロック数][,end]

既定値
  ブロック数=1

機能
  条件が真の時、ブロック数だけ外側のブロック先頭へ分岐します。
  endを指定することによって、_continue同様ブロックの最後へ分岐します。
  また、_if文同様、条件の継続が出来ます。
  ブロック内で使用出来ます。









                                    - 15 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.16  _c文

書式
        _c 条件指定 [,test][,and|or]

機能
  _if , _elseif , _exit , _repeat , _while , _until の各文において条件を継続
するために用います。この時、直前の条件指定の最後はand,or指定がなければなりま
せん。

使用例1
        _if <<ax e 0>>,and
        _c  <<bx e 0>>,and
        _c  <<cx ne 0>>
            inc si
        _endif

使用例2
        _do
            lodsb
            _exit <<al e 0>>,or
            _c   <<al b 20h>>
            add  al,20h
            stosb
        _enddo

































                                    - 16 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.17  _on文

書式1
        _on jump ラベル,条件指定,<命令>[,test][,and|or]

機能
  条件指定が真の時、ラベルへジャンプします。
  この時、命令の有無によって生成するコードが異なります。使用例及び展開例を参
照してください。

使用例1
        _on jump lab,<<ax e 1>>,<>

展開例1
        cmp  ax,e
        je   lab


使用例2
        _on jump lab,<<ax e 1>>,<<xor cx,cx>>

展開例2
            cmp  ax,1
            jne  L1
            xor cx,cx
            jmp lab
        L1:


書式2
        _on コード オペランド,条件指定,<命令>[,test][,and|or]

機能
  書式1より一般的にしたもので、条件指定が真の時、命令を実行して指定したコード
 オペランドを生成します。オペランドにブランク等を含む場合、オペランドを< >で
くくります。

使用例1
        _on call lab,<<ax e 1>>,<<xor cx,cx>>

展開例1
            cmp ax,1
            jne L1
            xor  cx,cx
            call lab
        L1:


使用例2
        _on jmp <far ptr lab>,<<ax e 1>>,<>

展開例2
            cmp ax,1
            jne L1
                jmp   far ptr lab
        L1:


                                    - 17 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.18  _blockreg文

書式
        _blockreg  <レジスタ列>

機能
  次行に続くブロック内で使用するレジスタを指定します。
  レジスタ列で指定されたレジスタは、ブロックの前後でpush,popされます。レジス
タ列に flag と指定すると pushf,popf が、又 all と指定するとpusha,popa が展開
されます。
  _blockreg を使用してブロックをネストしている場合は、_break 2 等でブロックを
飛び越す時にも、飛び越すブロックで指定されたレジスタはpop されます。


使用例
        _blockreg <flag,ax,bx>
        _do
            call func
        _until <<c>>

展開例
            pushf
            push ax
            push bx
        L1:     call func
                jnc L1
            pop bx
            pop ax
            popf





























                                    - 18 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.19  _popreg文

書式
        _popreg

機能
  _blockreg で指定された全てのレジスタを強制的にpopします。
  ブロック内からプロシージャを抜け出す前に用います。

使用例
        _blockreg <ax,bx>
        _loop
            call func
            _if <<c>>
                _popreg
                ret
            _endif
        _endloop

展開例
            push ax
            push bx
        L1: call func
            jnc L2
                pop bx
                pop ax
                ret
        L2: loop L1
            pop bx
            pop ax




























                                    - 19 -                                   


struc Ver2.40                                                  USER'S MANUAL


5.20  補足

  ここでは、_break , _exit , _continue , _repeat で使われているブロック数の意
味を分かりやすく（と、思いますが）、以下に関係図を示します。
  ブロックからの脱出、先頭への分岐するときの参考にしてください。

        TOP1: _do
              TOP2: _loop
                    TOP3: _while
                              _break     →EXT3
                              _break 2   →EXT2
                              _continue  →TOP3
                    BOT3: _enddo
                    EXT3: 
                    _break          →EXT2
                    _break 2        →EXT1
                    _continue end   →BOT2
                    TOP4: _block
                              _continue         →TOP4
                              _continue 2,end   →BOT2
                    BOT4: _endblock
                    EXT4:
              BOT2: _endloop
              EXT2: 
              _break       →EXT1
              _continue    →TOP1
              TOP5: _do
                        _break    →EXT5
                        _break 2  →EXT1
              BOT5: _until
              EXT5: 
        BOT1: _enddo
        EXT1:

























                                    - 20 -                                   


struc Ver2.40                                                  USER'S MANUAL


6  注意点

　このマクロは、OPTASMなどのout of rengeを考慮したアセンブラを対象に作成しま
したので、MASMなどで、out of rengeが発生した場合は、ブロックの中をサブルーチ
ンにするなどの処置をしてください。TASM においては、JUMPS疑似命令を使用して下
さい。
　また、マクロ内部では "__" , "$$" , "_?" , "_??" , "_$" , "_$$" , "_@" で始
まるマクロ、およびシンボルを使用していますので、同様なマクロ、シンボルの使用
は避けて下さい。
　TASMにおいては、一部マクロでエラー表示される場合がありますが、ちゃんと処理
されています。一応、確認してお使い下さい。


7  TASM(idealモード)について

  'struc'をTASMのidealモードで使用するときは、必ず struc240.inc と structb.i
nc をincludeしてください。そして、この時点ではmasmモードでなくてはなりません。
  idealモードに移行するには、_idealマクロを使用して下さい。（引数なし）また、
masmモードに移行するときは、_masmマクロを用います。
  これらのマクロを使用せずにモードを移行した場合、マクロ内部でマクロを定義し
ていますので、エラーになります。（マクロ定義が異なっているため）


8  変更履歴

     Version
  1.00(89-01-20) 初期バージョン
  1.10(89-01-23) 1) MASMにおけるcxnz,cxzのバグフィックス
                 2) 条件継続_c文のサポート
  2.00(89-03-02) 1) 条件記述における論理演算子(and,or)の評価順序指定
                 2) _if,_if_等の条件記述を統一
                 3) _for,_endforの削除
                 4) _continue , _repeat の追加
  2.10(89-03-11) 1) _while , _until のサポート
                 2) ほんの僅かな高速化
  2.11(89-03-12) 1) 条件指定において命令を指定した場合のバグフィックス
  2.12(89-03-12) 1) while,until文の論理演算子指定におけるバグフィックス
  2.20(89-06-14) 未公開
                 1) 比較演算子にnae,cxnz指定時におけるバグフィックス
                 2) TASMのidealモードにも対応
                 3) 条件の記述を拡張  (Ver2.12に上位互換)
                 4) _repeat,_continueにおいて、ブロックエンドに分岐する
                    パラメータを追加
  2.30(89-06-22) 1) _switch文のオペランドの記述を拡張(Ver2.12に上位互換)
                 2) 条件分岐 _on文をサポート
                 3) _if文にthenパラメータを追加


9  配布について

　このマクロは、作者の承諾無く自由に配布、転載して構いませんが、著作権は放棄
していません。
　また、本マクロの利用に伴ういかなる損害に対しても責任は負いません。
　個人的に使用する場合、改変も自由ですが、改変したものを作者に連絡無しに再配
布することは禁止します。



                                    - 21 -                                   


struc Ver2.40                                                  USER'S MANUAL


10  最後に

　'lms'(Ver1.0)を使用してその便利さに驚き、以前にbasicでやっていた構造化の方
法を使って 'struc' を作りました。最初は 'lms'(Ver1.0) との互換性を考えてまし
たが、結局'lms'(Ver2.00以降)と同じようになってしまいました。

　'struc'を作るにあたって、'lms'を参考させて頂き、またマクロを作るきっかけを
与えてくれた'lms'の作者である古川氏に、日頃から'struc'を使って頂いて、いろい
ろと応援してくださったＰＣ−ＶＡＮパソコンクラブのコーヒーブレイクの皆さんに
感謝します。

  最後になりましたが、このマニュアルはテキストフォーマッター『fin』によって作
成しました。作者のsyohei氏に感謝します。

　なお、バグ･意見･感想･要望等ありましたら、お知らせ下さい。

                                                                     Kacchan
                                                     JUPITER-NET ID JUP1076D
                                                     NIFTY-Serve ID NBC00034
                                                     PC-VAN      ID QNG33261






































                                    - 22 -                                   


struc Ver2.40                                                          INDEX


                                   目  次

1  はじめに ...........................................................    1
2  Ver2.30からの変更点 ................................................    1
3  対応アセンブラ .....................................................    2
4  使用方法 ...........................................................    2
5  文法 ...............................................................    2
5.1  用語 .............................................................    2
5.2  _if 〜 _elseif , _else 〜 _endif文 ...............................    5
5.3  _if文 ............................................................    6
5.4  _skipif文 ........................................................    6
5.5  _exitif文 ........................................................    7
5.6  _switch 〜 _case , _default 〜 _endsw文 ..........................    8
5.7  _do 〜 _enddo文 ..................................................   10
5.8  _while 〜 _enddo文 ...............................................   11
5.9  _do 〜 _until文 ..................................................   11
5.10  _loop 〜 _endloop文 .............................................   12
5.11  _block 〜 _endblock文 ...........................................   13
5.12  _break文 ........................................................   14
5.13  _exit文 .........................................................   14
5.14  _continue文 .....................................................   15
5.15  _repeat文 .......................................................   15
5.16  _c文 ............................................................   16
5.17  _on文 ...........................................................   17
5.18  _blockreg文 .....................................................   18
5.19  _popreg文 .......................................................   19
5.20  補足 ............................................................   20
6  注意点 .............................................................   21
7  TASM(idealモード)について ..........................................   21
8  変更履歴 ...........................................................   21
9  配布について .......................................................   21
10  最後に ............................................................   22


























                                                                            
