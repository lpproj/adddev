
_proc.inc(ver 2.8) document written by Oka
==========================================

☆☆　本文　☆☆

◆パブリックドメインです◆
このドキュメントおよびマクロファイルである _proc.inc は、パブリックドメイン
です。似るなり訳なりお好きなようにどうぞ。


◆概要◆

このマクロセットは、MASM および OPTASM に対して、以下のようなファシリティを
提供します。

１．レジスターやスタック渡しの変数を引数としてもつ手続きや関数の定義。
２．関数呼び出し時の自動的なレジスター／変数代入。
３．関数内の局所変数の使用。
４．関数内で値を保存すべきレジスターの宣言。

１、３、４は、MASM 5.1 の内部機能として実現されていますが、本マクロの「売り」
は、２です。つまり、Ｃの関数呼びだしのような書きかたができるという点です。

引数レジスターのマッチングとか、けっこう複雑な処理をしてますので、アセンブル
速度が一桁は遅くなると思いますが、それが気にならないかたは使ってみてください。

◆使用するマクロ名およびキーワード◆

_CheckProcVersion, _proc, _func, _local, _use, _usef, _nosave
_goto, _label, _retlabel, _return, _endp, _call

byte, word, dword, ea, addr, near, far, interrupt,
pascal, global, local, forward, public, extrn


_CheckProcVersion により、本マクロセットのバージョンをチェックします。

_proc および _func で手続きや関数（以下、一括して関数と呼ぶ）を定義し、関数名
のみ、または _callを前につけて、それを呼びだします。

_local で、関数内で使用する局所変数を定義します。

_use で、関数内で保存するレジスター群を指定します。

_usef で、フラグの保存を指定します。

_nosave で、関数呼びだしのときに保存する必要のないレジスター群を指定します。

_goto により、_labelまたは_retlabelでラベルが定義してある場所にジャンプします。

_lebel により、局所的なラベルを生成します。

_returnがくると、関数の終りにジャンプします。

_retlebel により、_returnに続いて、局所的なラベルを生成します。

_endp により、関数の終りを指定します。


◆使用する変数◆

_$ProcVersion, _$POSTFIX_UNDERSCORE, _$SAVE_ALL, _$NOSAVE, _$STRICT_CHECK,
_$EXTRN_WHEN_REFERRED, _$SOFT_EXTRN, NOPRMCHK, ALLGLOBAL

これらの値は、_$ProcVersion を除いて、ユーザーが定義できます。

_$ProcVersion は、本マクロセットのバージョンを表わします。通常、n.nn という形
式をしています。(2.80など)

_$POSTFIX_UNDERSCORE が定義されていると、関数名の後ろに _ (underscore) が付加
されます。通常は、つまり定義されなければ、関数名の前に _ が付加されます。
( -> _proc )

_$SAVE_ALL が定義されていると、パラメターレジスターがすべて保存されます。
( -> _call )

_$NOSAVE には、関数呼びだし時に保存する必要のないレジスター群を指定します。
( -> _nosave )

_$STRICT_CHECK の値が 0 でない場合は、関数呼びだしの際のリターンレジスターの
記述が、関数定義のものと一致しているかどうかをチェックします。
( -> _call )

_$EXTRN_WHEN_REFERRED は、extrn 宣言の時期を指示します。
この値が 0 (通常)の場合は、extrn タイプのプロトタイプが宣言された時点で、
extrn 宣言がなされます。
0 以外の場合は、外部関数の呼びだしがなされた時点で、シンボルの extrn 宣言が
なされます。したがって参照されなかったプロトタイプについては、余計な extrn
を宣言しません。
( -> _proc )

_$SOFT_EXTRN を 0 以外の値に設定すると、extrn プロトタイプによるシンボルの外
部宣言は、soft extrn (OPTASM feature) が用いられます。
( -> _proc )

NOPRMCHK が定義されていると、プロトタイプと関数定義との間の引数の型のチェッ
クを行ないません。なぜこのような例外処理があるかというと、MASMが長い引数のリ
ストをうまく処理してくれないからです。MASMを使っていて、
        -- m : parameter register(s) mismatch --
とか
        -- m : return register(s) mismatch --
というようなメッセージが出たら、/DNOPRMCHK を付けてアセンブルしてみてください。
( -> _proc )

ALLGLOBAL が定義されていると、local 指定のないすべての関数を public 宣言しま
す。
( -> _proc )


◆構文と説明◆

● _CheckProcVersion  ver

    ver n.nnの形式のバージョン番号。本マクロセットが指定されたバージョン未満
    のときエラーメッセージを表示する。たとえば、Version 2.8 以降のマクロセッ
    トを使いたいときは、
        _CheckProcVersion  2.80
    とする。


● _proc  name  <params>  <type>  external  <uses>

    手続き（戻り値のない関数）の定義、または、他で定義されている関数のプロト
    タイプの宣言を行なう。以降、関数名のみ、または _call name によって呼びだ
    すことが可能になる。

    name は関数の名前。実際に展開されるときは、_name というシンボル名になる。
    また、_$POSTFIX_UNDERSCORE が定義されている場合は、name_ となる。
    name は、_call name というようにマクロ定義される。
    ただし、後述の pascal 修飾子が付加されている場合は、シンボル名も name の
    ままであり、したがって、マクロ定義ができないので、name による関数呼び出
    しはできなくなる。

    params は、入力パラメターとなるレジスター、もしくは、スタック渡しとなる
    変数名の列。両端を < と > でくくる。

    一つのモジュールの中でプロトタイプ宣言と関数定義がともになされていた場合
    は、両者の params の 違異をチェックする。ただし、NOPRMCHK が定義されてい
    る場合は、チェックは行なわれない。

    params は、_call のときの引数と比較され、もし異なるレジスターや変数、定
    数が指定されていたら、_call 側でレジスターの保存と値の代入がなされる。
    _call 側で同じレジスターを指定した場合は、レジスターの保存をしないので注
    意すること。

    AX,BX,CX,DX の各レジスターについては、word,high byte,low byte を混在させ
    ることはできない。たとえば、AX については、AX,AH,AL のいずれかひとつしか
    宣言することはできない。

    パラメターとしてレジスター名以外が指定された場合は、スタックを用いた値渡
    しとなる。この場合、使用された名前は、スタックフレームを指すインデックス
    表現にテキストマクロ定義がなされる。

    スタック渡し引数のサイズも宣言したい場合は、<var size> の形でおこなう。
    ここで、size は、byte､word、dword のいずれかである。このとき、
        var  equ  <(size ptr [bp+??])>
    のようなテキストマクロが定義される。
    ex.:
        _proc foo <<abc byte>,<xyz word>,<buf dword>>

    引数として ... が指定されて場合は、それ以降の引数の数およびタイプが不定
    であることを示す。どんな値がスタックに積まれるかは、呼びだし側の引数によ
    る。

    type は、far, near または interrupt を指定。省略してもよい。また、
        <near pascal>
    のように、pascal 修飾子を付加することもできる。

    interrupt を指定した場合、proc のタイプは far となるが、最後が iret で終
    る。near, far の場合は、ret で終る。
    つまり、
    _proc foo <>  _proc foo <> near  _proc foo <> far  _proc foo <> interrupt
    は、           は、              は、              は、
    _foo proc      _foo proc near    _foo proc far     _foo proc far
         ...            ...               ...               ...
         ret            ret               ret               iret
    _foo endp      _foo endp         _foo endp         _foo endp
    と、展開される。

    pascal を指定した場合は、引数のスタックへの割当てが通常とは逆になる。つ
    まり、引数の右から左に向かって、スタックの浅い方から割当てていく。
    また、_endp でのリターン時に、引数を格納するのに使われていたスタック領域
    を解放する。
    ex.:
        _proc FOO <v1,v2> <near pascal>
            mov  ax, v1
            mov  bx, v2
        _endp

    これは、つぎのように展開される。

        FOO proc near                   ; FOO に _ が付かないことに注意。
            mov  ax, [bp+6]             ; v1
            mov  bx, [bp+4]             ; v2
            mov  sp, bp
            pop  bp
            ret  4
        FOO endp

    external は、public, extrn, global, local, forward のいずれかを指定する。

    public, extrn, forward が指定されたときは、プロトタイプ宣言とみなされる。
    public が指定されれば public文が、また extrn が指定されれば extrn 文が
    生成される。forward は、そのファイル内だけで使われるが、本体の定義が後の
    ほうにあるような関数の宣言をする。
    extrn 宣言の場合のタイプには、上の type が使われる。ただし、type が
    interrupt の場合は far に、また、type が省略された場合は、proc が使われ
    る。
    _$EXTRN_WHEN_REFERRED の値が 0 以外の場合は、関数がコールされた時点で、
    extrn 宣言がなされる。
    _$SOFT_EXTRN の値が 0 以外の場合は、extrn 宣言の際に、soft extrn (OPTASM
     feature) が用いられる。

    externalの指定がないか、または global, local が指定された場合は、関数本
    体の定義とみなされる。
    global を指定すると、同時にpublic文が生成される。つまり、public をつけた
    プロトタイプ宣言をしなくても、グローバルなシンボルになるわけだ。ただ、
    public 文は、いくつあってもかまわないので、なるべくプロトタイプ宣言もす
    るようにしたほうがよいと思う。
    local を指定するか、または external を省略した場合は、public 文は生成さ
    れない。ただし、（アセンブルオプション /D などで）ALLGLOBAL が定義されて
    いる場合は、external を省略しても public 文が生成される。

    uses は、params のサブセットで、この関数内で内容が破壊されるレジスターを
    指定する。ここで指定されたレジスターについては、呼び出し側で保存される。
    
    ex.:
        _proc  foo <si,ds,al,bar> far global

    これは、下のように展開される。

        public _foo
        _foo  proc  far
        bar equ <[bp+6]>
            push bp
            mov  bp, sp


● _func  name  <params>  <return>  type  external  <uses>

    関数を定義する。

    return は、出力となるレジスター（列）。両端を < と > でくくる。
    リターンレジスターは、当然のことながら呼び出し側での保存の対象とはならな
    い。
    それ以外は、_proc と同じ。

    ex.:
        _func  foo <si,ds,bar> <ax> near forward


● _local  <varlist> [,c]

    varlist は、変数宣言の列である。両端を < と > でくくる。

    変数宣言は、<name [type] [num]> の形式をしている。name だけのときは < >
    を省略できる。

    name で変数名を指定する。

    type は、byte, word または dwordを指定する。type を省略すると要素のサイ
    ズは２バイトと仮定される。

    num は、配列としてとるときの要素数である（バイト数ではないことに注意）。
    省略すると 1 が仮定される。

    スタック渡しの引数と同様、変数名にたいして、スタックフレームを参照するよ
    うなテキストマクロが定義される。したがって、この変数名をスタック渡しの変
    数名および局所変数名以外の用途に使用することは避けることが望ましい。

    複数の関数の中で、同じ名前の局所変数やスタック渡し変数を使用することは可
    能である（たんにテキストマクロの再定義がなされるだけ）。

    ここで word type の配列をとったとしても、アセンブラである以上、そのイン
    デックス指定は、バイト単位になってしまうことに注意。

    bp レジスターをスタックフレームのポインターとして使う。

    _local は、複数行にわけて記述できる。その場合、最後の _local 行をのぞき、
    ,c を付加しなければならない。

    ex.:
        _local <i, <j word 4>> ,c
        _local <<str byte 10>, <buf dword>>

    ここでは、４ワードの配列 i と、10バイトの配列 str を定義している。たぶ
    ん、つぎのようなテキストマクロが定義される。
    
        i    equ  <[bp-2]
        j    equ  <word ptr [bp-10]>
        str  equ  <byte ptr [bp-20]>
        buf  equ  <dword ptr [bp-24]>


● _usef

    フラグレジスターの保存の指定。
    ここで pushf を行ない、関数の終りで、popf を行なう。


● _use <registers> [,nosave]

    registers は、関数内で保存するレジスター（列）を指定する。
    先頭で push し、関数の終りで pop する。

    修飾子 nosave が付加された場合、この関数内では、registers にかんしては、
    _call の前後での保存をおこなわない。保存してほしい場合は、_call の第３引
    数として、明示的に指定する。

    _use は、_local の前に記述してはならない。

    _use は、複数行にわけて記述できる。

    ex.:
        _use <ds,es,si,di>
        _use <bx,dx>,nosave


● _nosave <registers>

    この関数内では、registers にかんして、_call の前後での保存をおこなう必要
    がないということを宣言する。もし保存してほしい場合は、_call の第３引数と
    して、明示的に指定すればよい。

	_$NOSAVE という変数に、レジスター名を定義してもよい。
		_$NOSAVE  equ  <ax,dx>
	この定義のあと、つぎの _$NOSAVE があらわれるまで、すべての関数内で
		_nosave  <ax,dx>
	の宣言をしたのと同じ効果がえられる。


● _goto label [,cond]

    _label によって同じ名前のラベルが定義されている場所へジャンプする。
    条件ジャンプを使いたいときは、cond として、struc (Ver 2.30以降) での _on
    と同様の条件指定が可能である。とうぜん、struc.inc をインクルードしている
    ことが前提となる。


● _label label

    関数内に局所的なラベルを生成する。ここで指定された label は、_goto の飛び
    先となる。


● _return [cond]

    _endp の直前にジャンプする。関数から途中で抜けだしたいときに使う。
    条件ジャンプを使いたいときは、cond として、struc (Ver 2.30以降) での _on
    と同様の条件指定が可能である。とうぜん、struc.inc をインクルードしている
    ことが前提となる。


● _retlabel label

        _return
        _label  label

    と展開される。


● _endp [n]

    関数の終りを指示する。自動的に ret または iret が挿入される。
    n は、ret のオペランドとなる。もし、0 を指定すると、ret 自体が
    挿入されない。
    _use が指定されているときは、レジスターのpopをする。


● _call  name  <args> <rets> <saves> または、
    name  <args> <rets> <saves>

    name は、呼びだされる関数の名前。
    args は、渡されるレジスターまたは変数、定数（列）。両端を < と >でくくる。
    rets は、関数から値が返されるレジスター（列）。
    saves は、この関数呼びだしの前後で保存すべきレジスター（列）。

    args は、name とおなじ名前の関数にたいするプロトタイプ宣言で記述された
    引数列と比較され、異なるレジスターや変数、定数を使用した場合は、自動的に
    対応するレジスターに値が代入、または、スタックにプッシュされる。この場合、
    代入されるほうのレジスター（プロトタイプ宣言されたレジスター）は、関数の
    リターンレジスターになっているか、または、nosave 指定がされている場合を
    除き、call の前後で自動的に保存される。
    _$SAVE_ALL というシンボルを定義した場合（_$SAVE_ALL = 1 など）は、すべての
    パラメターレジスターが保存される。

    _$STRICT_CHECK の値が 0 以外の場合、リターンレジスターの記述が、関数定義の
    ものと一致しているかどうかをチェックします。

◆引数の渡しかた◆

    引数には、byte, word, dword の修飾子を付加することができる。
    ex.:
        foo <<byte abc>,<word xyz>,<addr buf>>
    
    関数側がダブルワードタイプの引数を宣言しているとき、それにたいして、< >で
    くくったワードオブジェクトのペアを渡すことができる。
    ex.:
        _proc foo <<buf dword>>
    というプロトタイプ宣言があるとき、
        foo <<es,di>>
    などと書ける。このとき、buf には、es:di のレジスターペアが渡される。
    また、たんに
        foo <xyz>
    としたときは、xyz をダブルワードのオブジェクトと解釈し、その内容を渡す。

    関数側がワードタイプの引数を宣言しているとき、それにたいしてバイトタイプの
    オブジェクトを渡したいときは、明示的に <byte xxx> などとする必要がある。
    ただし、バイトレジスターはそのまま al, bh などと書いてよい。
    このとき、上位バイトは０クリアされる。

    関数側がバイトタイプの引数を宣言しているとき、それにたいしてワードタイプの
    オブジェクトを渡すことはできない。


◆オブジェクトのアドレスの渡しかた◆

    addr, ea, seg, offset が使える。
    このうち、seg と offset は、アセンブラー本来の予約語としてはたらく。
    addr は、代入先がダブルワードならばオブジェクトのセグメントとオフセットを
    渡し、代入先がワードならば effective address のみを渡す。
    また、addr は、オブジェクトが静的なものか、それともスタック上にとられた
    動的なものかによって、生成するコードがことなる。
    ea は、代入先がワードの場合の addr と同等である。

    ex.:
        _proc  foo <<a dword>>
        _endp
        
        str db 'abcde',0
        
        _proc  main <>
            _local <<buf byte 10>>
            foo <<addr str>>                      ; (1)
            foo <<addr buf>>                      ; (2)
            foo <<<SEG str>,<OFFSET str>>>        ; (3)
            foo <<ss,<ea buf>>>                   ; (4)
        _endp

    ここで、(1) と (3) は、つぎのように展開される。
            mov  ax, SEG str
            push ax
            mov  ax, OFFSET str
            push ax
    また、(2) と (4) は、つぎのように展開される。
            push ss
            lea  ax, buf
            push ax


◆可変個の引数をとる関数への引数の渡し方◆

    引数宣言が省略されている部分は、すべてスタック渡しとなるが、そのサイズは、
    引数に付加された修飾子によって決定される。修飾子がない場合は、ワードオブ
    ジェクトと解釈される。ただしレジスターは自動的に判別される。
    とくに、addr は、seg:offset アドレスペアとして解釈され、ea は、オフセット
    のみと解釈される。


◆パラメターレジスターの保存◆

以下の４通りの方法がある。

１．_$SAVE_ALL というシンボルを定義することにより、すべてのパラメターレジスター
　　を呼び出し側で保存する。もっとも簡単で安全なやり方だが、余分なpush/popが
　　生成されがちである。

２．_$SAVE_ALL というシンボルが定義されていない場合は、引数と一致したパラメター
　　レジスターは呼び出し側では保存されないので、関数内で _use マクロを使って
　　破壊されるレジスターを明示的に宣言しておく。最も一般的な方法。

３．関数の定義のときに、<uses> 引数により破壊されるレジスターを宣言しておく。
　　ここで指定されたレジスターは呼び出し側で保存される。

４．_nosave 宣言により、_call の際の無駄な push/pop の発生をおさえることができ
    る。必要があれば、_call の第３引数で保存すべきレジスターを指定する。


◆制限◆

・MASM 5.1 では、ダブルワードの引数を使ったときに、< > のネストが深くなりすぎ
  て、エラーが発生することがある。また、OPTASM 1.5 でも、/L スイッチをつけて
  リスティングをとっていると、やはり、エラーの発生する場合がある。

・関数側がバイトタイプの引数を宣言しているとき、それにたいしてワードタイプの
  オブジェクトを渡すことはできない。

・関数側がワードタイプの引数を宣言しているとき、それにたいしてバイトタイプの
  オブジェクトを渡すと、上位１バイトは０になる（符号拡張はしない）。ただし、
  オブジェクトがバイトタイプかどうかは調べないので、<byte x> や <byte ptr x>
  のように引数に修飾子をつけること。

・AX,BX,CX,DX の各レジスターについては、word,high byte,low byte を混在させる
  ことはできない。

・セグメントレジスターにたいするバイトオブジェクトの代入はできない。

・引数として、bx,si,di,bp を使った間接アドレッシングは、つぎのような場合に、
  問題を引き起こす可能性がある。
        _proc  foo <ax,bx>
        .....
        foo <[bx], dx>
  これは、つぎのように展開される。
        mov  bx, dx
        mov  ax, [bx]
  これは、[bx] の中まで調べていないためである。将来的には、[ ] の中まで調べる
  ようにしたいと思っている。（が、きっと実現しないであろう）

・_local 宣言がない関数中で、ax, cx, dx のすべてを引数とするような関数呼びだし
　のときは、スタック変数にたいして定数を渡すことはできない（定数をpushするため
　の一時的なレジスターが確保できないため）。この場合は、ダミーで _local 宣言を
　おこなってください。

・関数名には、あたまに _ が付加される。したがって、関数のオフセットなどを
　参照する必要がある場合は、
        mov bx, offset foo
　ではなく、
        mov bx, offset _foo
　などと記述すること。

・英字１文字の関数名を使わないこと（マクロ引数と混同されるおそれがあるため）。

・_$ ではじまる名前を使わないこと。


☆☆こんなところです。感想をお待ちしています☆☆

Ｏｋａ (PCVAN:DLJ83876, PCS:pcs20935, MIX:oka_t)


☆☆　変更履歴　☆☆

Version 2.8 での変更 (Mar. 14,1990)

・_$ProcVersionの新設。_proc.incのインクルード時に表示される。
・_$SOFT_EXTRNの新設。
  _$SOFT_EXTRN の値が 0 以外の場合は、extrn なプロトタイプ宣言にかんして、
  soft extrn (OPTASM feature) が用いられる。
・ALLGLOBALの新設。
  ALLGLOBAL が定義されていると、local 指定のないすべての関数を public 宣言
  する。
・NOPRMCHKの新設（ではないのだが、マニュアルに記載がなかった）。
  MASMを使う人は、/DNOPRMCHKを指定してください。
・pascal 修飾子が付加された場合、引数のスタックへの割当てを逆にするように
  した。また、関数名に _ を付加しない。
・_usefの新設。フラグ・レジスターの保存をする。

Version 2.6 での変更 (Nov. 7,1989)

・_$STRICT_CHECK, _$EXTRN_WHEN_REFERRED を新設。
　_$STRICT_CHECK の値が０以外であれば、関数呼びだし時に指定した、戻り値とな
　るレジスターの対応を厳密にチェックする。
　_$EXTRN_WHEN_REFERRED の値が０以外であれば、外部関数の呼びだしがなされた
　時点で、シンボルの extrn 宣言がなされる。
・extern type の省略時の解釈を変更。proc宣言の場合はタイプなし。extrn宣言
　の場合は、extrn <symbol>:proc となる。
・proc type にたいして、pascal 修飾子を設けた。

Version 2.51 での変更 (Sep.24,1989)

・_proc foo <al,bx> という宣言にたいして、foo <bl,ax> のような呼びかたをする
　と、レジスターの代入のしかたがおかしくなっていた。修正済み。
　これにともない、引数のレジスターの使用のチェックを厳しくした。

Version 2.5 での変更 (Sep.23,1989)

・スタックフレームを生成している関数内で、extrn,public,forwardでプロトタイプ
　宣言されており、かつ、変数引数を持たない関数を呼びだすと、関数の最後で
　スタックフレームの解放がおこなわれないというオオタコなバグを修正。
　（ホムンクルスさん、感謝）
・... による、可変個の引数の宣言ができるようになった。引数のサイズは呼びだし
　側で指定する(byte,word,dword,addr,eaなど)。addr は、seg:offsetペアと解釈
　される。

Version 2.4 での変更 (Sep. 18, 1989)

・ファイル名が _proc.inc となった(optasm V1.6 対応)。
・アセンブルのパス１で、バージョンの表示をする。
・dword 修飾子により、ダブルワードの引数が使用できる。この引数への代入には、
  < > でくくられた、ワードオブジェクトのペア、または、addr 修飾による
  オブジェクトアドレスを指定する。( ex.: <es,di>, <addr buf> )
・_nosave 宣言子がくわわった。これは、従来の nosave 修飾子と同様の
  効果をもつ。
・_local, _use を複数行にわけて記述できるようになった。
・_$POSTFIX_UNDERSCORE を定義することにより、関数名に付加する _ を、関数名の
  後ろにつけるようになる（LSI-C 対応）。

Version 2.2 での変更 (June 22, 1989)

・<byte ptr x>や<word ptr x>の代わりに、<byte x>, <word y>などという書き方も
　できる。
・ワードタイプのパラメターにたいして、<byte x>などと書くことにより、バイト
　タイプのオブジェクトを渡すことができる。このとき、上位バイトには０が入る。
・関数の proc タイプで interrupt というキーワードが増えた。これを使うと、
　proc タイプは far となるが、最後に（retではなく）iret が付加される。
・MASSANの要望をいれて、_CheckProcVersion により、バージョン番号のチェックを
　できるようにした。したがってファイル名は、ただの proc.inc となった。

Version 1.9 での変更 (June 17, 1989)

・バイトレジスターを、スタック渡し引数に代入するときのバグを修正。
・セグメントレジスターを受け側のパラメターとして指定したときに、セグメント
　レジスターへの代入は、callの直前におこなうようにした。
・スタック渡し引数または局所変数として宣言されたシンボルは、当該関数を
　抜けたあとは、<######>とういようなテキストがイクエイトされる。
・_returnで、飛び先を指定できる。
・_gotoがついた。
・_labelまたは_retlabelで、_returnおよび_gotoの飛び先となる局所ラベルの定義
　ができる。
・_returnおよび_gotoで、条件を使用するときは、struc23x.inc（かっちゃん作）が
　必要である。

Version 1.8 での変更 (June 4, 1989)

・ホムンクルスさんの要望を容れて、dword のスタック渡し引数を使えるように
した。また、定数もスタック渡しができるようにした。ただし、あまりに複雑な
（ax,bx,cx,dx,si,di,bpをすべて使うような）受渡しをやると、エラーになる。
・_call の第２引数として、リターンレジスターを指定できるようにした。ただし
現在のところ、これはプロトタイプ宣言での指定と一致していなければならない。
将来的には、指定されたレジスターへの値の代入をサポートする予定である。
・_use に nosave という修飾子を設けた。これをつけると、その関数内では
_use で宣言されたレジスターについては、_call の前後での保存をおこなわなく
なる。これにともない、_call の第３引数で、強制的に値の保存をおこなわせたい
レジスターの指定をすることができるようにした。


Version 1.7 での変更 (May 25, 1989)

・_return マクロが struc212 とリンクした。すなわち、_return による無条件
リターンのほかに、_return {cond} による条件指定も可能になった。{cond} は
struc212 における条件指定とまったく同じである。
　この部分は、かっちゃんの協力に負うところがおおきい。厚く感謝します。

Version 1.6 での変更 (May 17, 1989)

・_$SAVE_ALL という変数を定義することにより、すべてのパラメターレジスターの
保存をおこなうようになった（ろふみ対応）。
・_proc / _func の引数を１つ増やした。これは、パラメターレジスターのうちで
関数内で破壊されるレジスターを指定する。この場合、指定されたレジスターの
保存は呼び出し側でおこなわれる。

Version 1.5 での変更 (May 16, 1989)

・_proc/_func の引数として、バイトレジスターおよびスタック渡しの指定が可能に
なった。これにともない、値の代入操作には、できるかぎり mov と xchg を使うように
した。
・_proc/_func で定義された関数は、_call を使わずに、(C のように) 名前だけで
直接に呼び出せる。これを実現するために、実際の関数のラベルは、
( C のように) 前に _ をつけたものになる。
・_return の引数として、条件ジャンプの指定が可能になった。


Version 1.4b での変更 (May 8, 1989)

・_localマクロを新設。関数内の局所変数を宣言する。_procの直後、_useの
前に指定すること。
・_beginを廃止した。あれは、けっこう処理を重たくしてるみたいだったので。
それに、あんまりつかわないでしょ。かわりに、forwardというexternalをまうけた。
・_callのときのレジスターの保存の仕方が変わった。いぜんはリターン値になって
いないパラメターレジスターはcallの前後ですべて保存していたが、今回からは、
実引数と一致している場合には、保存しないことにした。
・プロトタイプとの不一致の場合のエラーメッセージ。

Version 1.3 での変更

・_beginのバグふぃっくす。_procから抜けだすための_returnマクロを新設。

Version 1.2 での変更

・_procおよび_funcのexternalのところに、新しくglobalという指定が加わった。
これは、関数定義のさいにのみ指定することができ、public xxxという文を
生成する。
したがって、別にプロトタイプ宣言をする必要はない（してもかまわない。むしろ、
したほうがよい）。
このglobalを引っかけて、プロトタイプ宣言ファイルを作るバッチコマンドを添付して
ある。参考にしてほしい。

Version 1.1 での変更

・_func で、parameter として指定されているレジスターのうち、return にも指定
されているものは、push/pop による保存をしない。
1.0 では、保存してましたが、これは、バグでした。

・parameter に指定されているレジスターが、_call の argument としてして
使われていなければ、直接に mov によって値の代入をおこなう。
1.0 では、つねに push/pop によって値の代入をおこなっていましたが、
これでは、offset var のようなものを argument として渡すことができませんね。

（ろふみさん、ありがとね〜）

